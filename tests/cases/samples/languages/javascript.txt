var require_hyperscript = __commonJS({
  "../node_modules/.pnpm/mithril@2.2.2/node_modules/mithril/render/hyperscript.js"(exports, module) {
    "use strict";
    var Vnode = require_vnode();
    var hyperscriptVnode = require_hyperscriptVnode();
    var hasOwn = require_hasOwn();
    var selectorParser = /(?:(^|#|\.)([^#\.\[\]]+))|(\[(.+?)(?:\s*=\s*("|'|)((?:\\["'\]]|.)*?)\5)?\])/g;
    var selectorCache = {};
    function isEmpty2(object2) {
      for (var key in object2)
        if (hasOwn.call(object2, key))
          return false;
      return true;
    }
    function compileSelector(selector) {
      var match, tag = "div", classes = [], attrs = {};
      while (match = selectorParser.exec(selector)) {
        var type2 = match[1], value = match[2];
        if (type2 === "" && value !== "")
          tag = value;
        else if (type2 === "#")
          attrs.id = value;
        else if (type2 === ".")
          classes.push(value);
        else if (match[3][0] === "[") {
          var attrValue = match[6];
          if (attrValue)
            attrValue = attrValue.replace(/\\(["'])/g, "$1").replace(/\\\\/g, "\\");
          if (match[4] === "class")
            classes.push(attrValue);
          else
            attrs[match[4]] = attrValue === "" ? attrValue : attrValue || true;
        }
      }
      if (classes.length > 0)
        attrs.className = classes.join(" ");
      return selectorCache[selector] = { tag, attrs };
    }
    function execSelector(state2, vnode) {
      var attrs = vnode.attrs;
      var hasClass = hasOwn.call(attrs, "class");
      var className = hasClass ? attrs.class : attrs.className;
      vnode.tag = state2.tag;
      vnode.attrs = {};
      if (!isEmpty2(state2.attrs) && !isEmpty2(attrs)) {
        var newAttrs = {};
        for (var key in attrs) {
          if (hasOwn.call(attrs, key))
            newAttrs[key] = attrs[key];
        }
        attrs = newAttrs;
      }
      for (var key in state2.attrs) {
        if (hasOwn.call(state2.attrs, key) && key !== "className" && !hasOwn.call(attrs, key)) {
          attrs[key] = state2.attrs[key];
        }
      }
      if (className != null || state2.attrs.className != null)
        attrs.className = className != null ? state2.attrs.className != null ? String(state2.attrs.className) + " " + String(className) : className : state2.attrs.className != null ? state2.attrs.className : null;
      if (hasClass)
        attrs.class = null;
      for (var key in attrs) {
        if (hasOwn.call(attrs, key) && key !== "key") {
          vnode.attrs = attrs;
          break;
        }
      }
      return vnode;
    }
    function hyperscript(selector) {
      if (selector == null || typeof selector !== "string" && typeof selector !== "function" && typeof selector.view !== "function") {
        throw Error("The selector must be either a string or a component.");
      }
      var vnode = hyperscriptVnode.apply(1, arguments);
      if (typeof selector === "string") {
        vnode.children = Vnode.normalizeChildren(vnode.children);
        if (selector !== "[")
          return execSelector(selectorCache[selector] || compileSelector(selector), vnode);
      }
      vnode.tag = selector;
      return vnode;
    }
    module.exports = hyperscript;
  }
});
